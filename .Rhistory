coef(sim1_loess)
View(sim1_loess)
sim1_loess <- loess(y ~ x, data = sim1)
coef(sim1_loess)
sim1_loess
grid <- sim1 %>%
data_grid(x)
grid
ggplot(sim1, aes(x, y)) +
geom_point()
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
ggplot(sim1_leoss, aes(x, y)) +
geom_point()
ggplot(sim1_loess, aes(x, y)) +
geom_point()
ggplot(sim1, aes(x, y)) +
geom_point()
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_loess, var = "resid_loess") %>%
add_predictions(sim1_loess, var = "pred_loess")
ggplot(sim1, aes(x, y)) +
geom_point()
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(x, y)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_loess, var = "resid_loess") %>%
add_predictions(sim1_loess, var = "pred_loess")
ggplot(sim1, aes(x, y)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_loess, var = "resid_loess") %>%
add_predictions(sim1_loess, var = "pred_loess")
sim1_loess <- loess(y ~ x, data = sim1)
coef(sim1_loess)
sim1_loess
#Grid
grid <- sim1 %>%
data_grid(x)
grid
grid  <- sim1 %>%
add_predictions(sim1_loess)
grid
sim1 <- sim1 %>%
add_residuals(sim1_loess, var = "resid_loess") %>%
add_predictions(sim1_loess, var = "pred_loess")
ggplot(sim1, aes(x, y)) +
geom_point() +
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
ggplot(sim1, aes(x, y)) +
geom_point()
geom_line(aes(y = pred_loess), data = grid, colour = "red", size = 1)
pred_loess
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
dist1 <- sim1 %>%
mutate(
dodge = rep(c(-1, 0, 1) / 20, 10),
x1 = x + dodge,
pred = 7 + x1 * 1.5
)
ggplot(dist1, aes(x1, y)) +
geom_abline(intercept = 7, slope = 1.5, colour = "grey40") +
geom_point(colour = "grey40") +
geom_linerange(aes(ymin = y, ymax = pred), colour = "#3366FF")
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(models, aes(a1, a2)) +
geom_point(data = filter(models, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>%
ggplot(aes(a1, a2)) +
geom_point(data = filter(grid, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(grid, rank(dist) <= 10)
)
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
sim1_mod <- lm(y ~ x, data = sim1)
coef(sim1_mod)
sim1a <- tibble(
x = rep(1:10, each = 3),
y = x * 1.5 + 6 + rt(length(x), df = 2)
)
measure_distance <- function(mod, data) {
diff <- data$y - make_prediction(mod, data)
mean(abs(diff))
}
model1 <- function(a, data) {
a[1] + data$x * a[2] + a[3]
}
library(ggplot2)
library(dplyr)
require(broom)
load("data_sim1.Rda")
data_sim1
load("data_sim1.Rda")
data_sim1
#fit a linear model for y using x
linear_model <- lm (data_sim1)
# get the coefficients from the model
# tidy is a trick to make the model object from lm into a data frame
#   makes it easier to extract parts of it
#   -> you can access them with paramters[1] to get the intercept, [2] for the slope
parameters = tidy(linear_model)$estimate
#calculate the predictions from the lm model and add them to the data_sim1
#
# data_sim1 <- data_sim1 %>%
#   mutate(
#     linear_model_prediction = ?
#   )
#let's plot the data and the prediction
# hint: make the first layer have the predictions with larger sized points
#     so the actual data can be put on top of it
# ggplot( ? , aes(x)) +
#   geom_point(aes(y= ?), size = 3, colour = "red") +
#   geom_point(aes(y= ?), size = 2, colour = "grey30")
linear_model <- lm (data_sim1)
library(ggplot2)
library(dplyr)
require(broom)
load("data_sim1.Rda")
data_sim1
linear_model <- lm (data_sim1)
linear_model
parameters = tidy(linear_model)$estimate
data_sim1 <- data_sim1 %>%
mutate(
linear_model_prediction = ?
)
data_sim1 <- data_sim1 %>%
mutate(
linear_model_prediction = parameters
)
linear_model
linear_model <- lm(y ~ x, data_sim1)
linear_model
parameters = tidy(linear_model)$estimate
data_sim1 <- data_sim1 %>%
mutate(
linear_model_prediction = parameters
)
parameters
data_sim1 <- data_sim1 %>%
mutate(
linear_model_prediction = parameters[1] + parameters[2]*data_sim1[x]
)
data_sim1 <- data_sim1 %>%
mutate(
linear_model_prediction = parameters[1] + parameters[2]*data_sim1$x
)
data_sim1
ggplot( ? , aes(x)) +
ggplot(data_sim1$x, aes(x)) +
geom_point(aes(y= data_sim1$y), size = 3, colour = "red") +
geom_point(aes(y= data_sim1$linear_model_prediction), size = 2, colour = "grey30")
ggplot(data_sim1$x, aes(x)) +
geom_point(aes(y= data_sim1$linear_model_prediction), size = 3, colour = "red") +
geom_point(aes(y= data_sim1$y), size = 2, colour = "grey30")
ggplot(x, aes(x)) +
geom_point(aes(y= linear_model_prediction), size = 3, colour = "red") +
geom_point(aes(y= y), size = 2, colour = "grey30")
ggplot(data_sim1$x, aes(x)) +
geom_point(aes(y= data_sim1$linear_model_prediction), size = 3, colour = "red") +
geom_point(aes(y= data_sim1$y), size = 2, colour = "grey30")
#fit a linear model for y using x
linear_model <- lm(y ~ x, data_sim1)
linear_model
# get the coefficients from the model
# tidy is a trick to make the model object from lm into a data frame
#   makes it easier to extract parts of it
#   -> you can access them with paramters[1] to get the intercept, [2] for the slope
parameters = tidy(linear_model)$estimate
parameters
#calculate the predictions from the lm model and add them to the data_sim1
data_sim1 <- data_sim1 %>%
mutate(
linear_model_prediction = parameters[1] + parameters[2]*data_sim1$x
)
data_sim1
#let's plot the data and the prediction
# hint: make the first layer have the predictions with larger sized points
#     so the actual data can be put on top of it
ggplot(data_sim1, aes(x)) +
geom_point(aes(y= linear_model_prediction), size = 3, colour = "red") +
geom_point(aes(y= y), size = 2, colour = "grey30")
model_linear_function <- function(a, data) {
a[1] + data$x * a[2]
}
# example usage to make predictions
model_linear_function(c(7,5), data_sim1)
model_function = model_linear_function
measure_distance <- function(mod_params, data) {
diff <- data$y - model_function(mod_params, data)
sqrt(mean(diff ^ 2))
}
best <- optim(c(0, 0), measure_distance, data = (#TODO the simple dataset))
best$par
measure_distance_mad <- function(mod_params, data) {
best$par
best <- optim(c(0, 0), measure_distance, data = data_sim1)
best$par
measure_distance_mad <- function(mod_params, data) {
diff <- data$y - model_function(mod_params, data)
mean(abs(diff))
}
mad_fit <- optim(c(0, 0), ?, data = data_sim1)
model_function
mad_fit <- optim(c(0, 0), measure_distance_mad, data = data_sim1)
mad_fit$par
mad_fit_intercept = mad_fit$par[1]
mad_fit_slope = mad_fit$par[2]
if(!require(mlbench)){install.packages("mlbench"); require(mlbench)} # common datasets to use
# some dependencies for caret that aren't automatically installed
if(!require(ModelMetrics)){install.packages("ModelMetrics"); require(ModelMetrics)}
if(!require(recipes)){install.packages("recipes"); require(recipes)}
if(!require(DEoptimR)){install.packages("DEoptimR"); require(DEoptimR)}
if(!require(caret)){install.packages("caret", dependencies = c("Depends", "Suggests")); require(caret)} # ML package and its dependencies. This will take awhile!
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
set.seed(370)
# installs packages only if you don't have them
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
install.packages("car")
library("car")
# installs packages only if you don't have them
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
install.packages("car")
install.packages("pbkrtest")
# installs packages only if you don't have them
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
library("car")
library("reshape2")
library("dplyr")
library("gplots")
mpg <- read.csv("mpg.csv") # t-test data
pew <- read.csv("pew.csv") # chi-squared data
wpm <- read.csv("words.csv") # ANOVA data
setwd("~/info470project")
professional.hires <- read.csv('/info470project/data/professionalhires.csv', row.names=1)
ethnic.overall <- read.csv('data/EthnicDistributionOverall.csv')
professional.hires <- read.csv('data/professionalhires.csv', row.names=1)
professional.hires <- read.csv('data/professionalhires.csv')
professional.hires <- read.csv('data/professionalhires.csv')
professional.hires
ggplot(data = professional.hires) +
geom_point(mapping = aes(x = "Year", y = "Count", color = "College"))
library(dplyr)
library(ggplot2)
ggplot(data = professional.hires) +
geom_point(mapping = aes(x = "Year", y = "Count", color = "College"))
ggplot(data = professional.hires) +
geom_point(mapping = aes(x = Year, y = Count, color = College))
d %>%
group_by(Year) %>%
summarize(College = College[1],
max_loss = max(LOSS))
# Find total amount of new hires for every year
d -->
d <-
group_by(Year) %>%
summarize(College = College[1],
max_loss = max(LOSS))
ph.df <- read.csv('data/professionalhires.csv')
group_by(ph.df$Year) %>%
summarize(College = College[1],
max_loss = max(LOSS))
ph.df
# Find total amount of new hires for every year
ph.df %>%
group_by(Year) %>%
summarise(num = n(),
totalHires = sum(Count))
# Add a column "kml" to the mtcars dataframe which provides the kilometers / liter for each car. The conversion from MPG to KML is provided by MPG_KML_RATIO.
mtcars$kml <- mtcars$mpg * MPG_KML_RATIO
ph.df <- read.csv('data/professionalhires.csv')
ph.df
totalHires
ph.df %>%
group_by(Year) %>%
summarise(num = n(),
totalHires <- sum(Count))
totalHires
library(ddply)
install.package(ddply)
install.packages(ddply)
ddply(ph.df, .(Year), summarise, TotalHires=sum(Count))
aggregate(. ~ Year, data=ph.df, FUN=sum)
total.dr <- aggregate(. ~ Year, data=ph.df, FUN=sum)
ph.dr$TotalHires <- total.dr.Count
ph.dr$TotalHires <- total.dr$Count
total.df <- aggregate(. ~ Year, data=ph.df, FUN=sum)
#Create calculated field
ph.df$TotalHires <- total.df$Count
ph.df
ph.df$Percentage <- ph.df$Count / ph.df$TotalHires
ph.df
ggplot(data = professional.hires) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
ph.df$Percentage <- ph.df$Count / ph.df$TotalHires
ph.df
ggplot(data = professional.hires) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
facetPlot <- colorPlot + facet_grid(College ~ .)
# Plot percentages over time for each College
# Colleges separate by color
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
colorPlot
# Colleges separate by facets
facetPlot <- colorPlot + facet_grid(College ~ .)
facetPlot
# Colleges separate by color
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
colorPlot
# Colleges separate by facets
facetPlot <- colorPlot + facet_wrap( ~ College, ncol=2)
facetPlot
ph.dr %>%
filter(College== "Information School") %>%
geom_point(mapping = aes(x = Year, y = Percentage))
ph.df %>%
filter(College== "Information School") %>%
geom_point(mapping = aes(x = Year, y = Percentage))
ph.df
ph.df %>%
filter(College== "Information School") %>%
geom_point(mapping = aes(x = Year, y = Percentage))
geom_point(mapping = aes(x = Year, y = Percentage)) + geom_line()
facetPlot <- colorPlot + facet_wrap( ~ College, ncol=2) + geom_line()
facetPlot
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College)) + geom_line()
colorPlot
# Plot percentages over time for each College
# Colleges separate by color
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
colorPlot
# Colleges separate by facets
facetPlot <- colorPlot + facet_wrap( ~ College, ncol=2)
facetPlot
facetPlot <- colorPlot + facet_wrap( ~ College, ncol=1)
facetPlot
facetPlot <- colorPlot + facet_wrap( ~ College, ncol=3)
facetPlot
facetPlot <- geom_point(mapping = aes(x = Year, y = Percentage)) + facet_wrap( ~ College, ncol=3)
# Plot percentages over time for each College
# Colleges separate by color
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage))
colorPlot
# Colleges separate by facets
facetPlot <- colorPlot + facet_wrap( ~ College, ncol=3)
facetPlot
# Plot percentages over time for each College
basicPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage))
# Colleges separate by color
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage))
colorPlot
# Colleges separate by facets
facetPlot <- basicPlot + facet_wrap( ~ College, ncol=3)
facetPlot
# Colleges separate by color
colorPlot <- ggplot(data = ph.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
overallPlot <-  <- ggplot(data = total.df) +
overallPlot <- ggplot(data = total.df) +
geom_point(mapping = aes(x = Year, y = Count))
overallPlot
# Plot total count over time for all colleges
overallPlot <- ggplot(data = total.df) +
geom_bar(mapping = aes(x = Year, y = Count))
overallPlot
overallBars <- ggplot(data = total.df) +
geom_plot(mapping = aes(x = Year, y = Count)) +geom_bar(stat = "Year")
overallBars <- ggplot(data = total.df) +
geom_point(mapping = aes(x = Year, y = Count)) +geom_bar(stat = "Year")
overallBars <- ggplot(data = total.df) +
geom_point(mapping = aes(x = Year) +geom_bar(stat = "Count")
overallBars
overallBar <- ggplot(data = total.df, aes(x = Year)) +
geom_bar(stat="count")
overallBar
overallBar <- ggplot(data = total.df, aes(x = Year)) +
geom_bar(stat=Count)
overallBar <- ggplot(data = total.df, aes(x = College)) +
geom_bar()
overallBar
overallBar <- ggplot(data = ph.df, aes(x = Year)) +
geom_bar(stat=Count)
overallBar <- ggplot(data = ph.df, aes(x = Year)) +
geom_bar()
overallBar
overallBar <- ggplot(data = ph.df, aes(x = Year, y = Count)) +
geom_bar(stat="identity")
overallBar
overallLine<- ggplot(data = ph.df, aes(x = Year, y = Count)) +
geom_line(stat="identity")
overallLine
overallLine<- ggplot(data = ph.df, aes(x = Year, y = Count)) +
geom_line()
overallLine
overallLine<- ggplot(data = ph.df, aes(x = Year, y = Count, group=1)) +
geom_line()
overallLine
stackedBar <- ggplot(data = ph.df, aes(x = Year, y = Count, fill = College )) +
geom_bar(stat="identity")
stackedBar
ethnic.resignations <- read.csv('data/EthnicDistributionResignations.csv')
setwd("~/info470project")
ethnic.resignations <- read.csv('data/EthnicDistributionResignations.csv')
ethnic.resignations <- read.csv('data/EthnicDistributionResignations.csv')
gender.resignations <- read.csv('data/GenderDistributionResignations.csv')
profhires.df <- read.csv('data/professionalhires.csv')
profhires.df
# Calculate total number of new hires for each year
total.df <- aggregate(. ~ Year, data=profhires.df, FUN=sum)
# Add total hires column to dataframe
profhires.df$TotalHires <- total.df$Count
# Create Percentage Column (count/total hires)
profhires.df$Percentage <- profhires.df$Count / profhires.df$TotalHires
profhires.df
## Plot total count over time for all colleges
# scatterplot
overallPlot <- ggplot(data = total.df) +
geom_point(mapping = aes(x = Year, y = Count))
overallPlot
# bar graph
overallBar <- ggplot(data = profhires.df, aes(x = Year, y = Count)) +
geom_bar(stat="identity")
overallBar
## Plot percentages over time for each College
basicPlot <- ggplot(data = profhires.df) +
geom_point(mapping = aes(x = Year, y = Percentage))
# scatter plot - Colleges separate by color
colorPlot <- ggplot(data = profhires.df) +
geom_point(mapping = aes(x = Year, y = Percentage, color = College))
colorPlot
# scatter plot - Colleges separate by facets
facetPlot <- basicPlot + facet_wrap( ~ College, ncol=3)
facetPlot
# bar graph - College sepeated by stacked bars
stackedBar <- ggplot(data = profhires.df, aes(x = Year, y = Count, fill = College )) +
geom_bar(stat="identity")
stackedBar
# idk whats the best way to display data form above opens ^^^^^^^
